name: CI/CD Pipeline

on:
  push:
    branches: [main]
  pull_request:
    branches: [main]

jobs:
  unit-tests:
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v4
      
      - name: Install system dependencies
        run: sudo apt-get update && sudo apt-get install -y libzbar-dev

      - name: Setup Python
        uses: actions/setup-python@v4
        with:
          python-version: "3.10"

      - name: Install Python dependencies
        run: |
          pip install -r requirements.txt
          pip install pytest

      - name: Run unit tests
        run: pytest tests/unit/ -v

  integration-tests:
    needs: unit-tests
    runs-on: ubuntu-latest
    services:
      mysql:
        image: mysql:8.0
        env:
          MYSQL_ROOT_PASSWORD: root
          MYSQL_DATABASE: qr_secure
          MYSQL_USER: qr_user
          MYSQL_PASSWORD: qr_password
        ports:
          - 3306:3306
        options: --health-cmd="mysqladmin ping -uroot -proot" --health-interval=10s --health-start-period=30s

    steps:
      - uses: actions/checkout@v4
      
      - name: Install system dependencies
        run: sudo apt-get update && sudo apt-get install -y libzbar-dev

      - name: Setup Python
        uses: actions/setup-python@v4
        with:
          python-version: "3.10"

      - name: Install Python dependencies
        run: |
          pip install -r requirements.txt
          pip install pytest pymysql

      - name: Wait for MySQL
        run: |
          for i in {1..30}; do
            if mysqladmin ping -h127.0.0.1 -P3306 -uqr_user -pqr_password --silent; then
              echo "✅ MySQL is up!"
              break
            fi
            echo "⏳ Waiting for MySQL..."
            sleep 2
          done

      - name: Initialize database
        run: |
          export PYTHONPATH=$GITHUB_WORKSPACE
          python -c "
          from appV2_2 import app, db
          app.config['SQLALCHEMY_DATABASE_URI'] = 'mysql+pymysql://qr_user:qr_password@localhost:3306/qr_secure'
          with app.app_context():
              db.create_all()
          "

      - name: Run integration tests
        run: |
          export PYTHONPATH=$GITHUB_WORKSPACE
          pytest tests/integration/ -v

  docker-build:
    needs: integration-tests
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v4
      
      - name: Login to Docker Hub
        uses: docker/login-action@v2
        with:
          username: ${{ secrets.DOCKER_HUB_USERNAME }}
          password: ${{ secrets.DOCKER_HUB_TOKEN }}

      - name: Build and push Docker images
        run: |
          docker-compose build
          docker-compose push
